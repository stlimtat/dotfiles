#!/usr/bin/env zsh
# .abnormal
# For lvim - abnormal
# https://www.lunarvim.org/
export SOURCE=${HOME}/dev/source
if [[ -f "${HOME}/.local/bin/lvim" ]]; then
  alias lvim="PYTHONPATH=${SOURCE}/src/py:${SOURCE}/src/pytests:${SOURCE}/src/pytests/abnormal/test ${HOME}/.local/bin/lvim"
  alias vim="PYTHONPATH=${SOURCE}/src/py:${SOURCE}/src/pytests:${SOURCE}/src/pytests/abnormal/test ${HOME}/.local/bin/lvim"
fi
# For astrovim or lazyvim
if [[ -f "${HOME}/.config/nvim/config.ld" || -f "${HOME}/.config/nvim/lazy-lock.json" ]]; then
  alias vim="PYTHONPATH=${SOURCE}/src/py:${SOURCE}/src/pytests:${SOURCE}/src/pytests/abnormal/test $(brew --prefix )/bin/nvim"
fi

# Some abnormal security stuff
alias airflow_worker_ips="aws ec2 describe-instances --filters Name=tag:Name,Values=airflow-worker-prod | jq -r '.Reservations[].Instances[].PrivateIpAddress' | sort "
alias airflow_onboarding_worker_ips="aws ec2 describe-instances --filters Name=tag:Name,Values=airflow-worker-onboarding | jq -r '.Reservations[].Instances[].PrivateIpAddress' | sort"
# helm publish airflow
alias gh_publish_airflow_prod="gh workflow run publish_bento_image_ecr.yml --ref $(git rev-parse --abbrev-ref HEAD) -f bento_target='gtm/onboarding/airflow' -f environments='prod' -f region_eu=false -f region_us=true -f region_us_legacy=false -f instance_tags='cd cd-arm' && gh run list --workflow=publish_bento_image_ecr.yml"
alias gh_publish_airflow_test="gh workflow run publish_bento_image_ecr.yml --ref $(git rev-parse --abbrev-ref HEAD) -f bento_target='gtm/onboarding/airflow' -f environments='test' -f region_eu=false -f region_us=true -f region_us_legacy=false -f instance_tags='cd cd-arm' && gh run list --workflow=publish_bento_image_ecr.yml"
# change absec
alias absec_legacy="export ABSEC_CLOUD=aws; export ABSEC_ENV=prod; export ABSEC_PART=management; export ABSEC_REGION=us-east-1"
alias absec_test="export ABSEC_CLOUD=aws; export ABSEC_ENV=test; export ABSEC_PART=test; export ABSEC_REGION=us-east-2"

# Abnormal
export ABNORMAL_USER=slim
export ABSEC_CLOUD=aws
export ABSEC_ENV=prod
export ABSEC_IDENTITY="aid://user/slim"
export ABSEC_PART=management
export ABSEC_REGION=us-east-1
export INFRA=${HOME}/dev/infrastructure
export GOFLAGS="-tags=dynamic"
# Stop Terraform from barfing on ARM Macbooks
export GODEBUG=asyncpreemptoff=1
export MTLS_HOME=${HOME}/.mtls/user
export PKG_CONFIG_PATH=$(brew --prefix openssl@1.1)/lib/pkgconfig
export STORAGE_ACCOUNT_URL="https://abnormaldataneu.blob.core.windows.net"
export TERRAGRUNT_SOURCE_MAP="git::ssh://git@github.com/abnormal-security/infrastructure-modules.git=${HOME}/dev/infrastructure-modules"
export TERRAGRUNT_SOURCE_UPDATE=true
export VENV=${HOME}/dev/venv
start_time=$(gdate +%s%3N)
echo "Running abnormal/tools/dev/common_bash_includes...${start_time}ms"
source ${SOURCE}/tools/dev/common_bash_includes
end_time=$(gdate +%s%3N)
time_taken=$((end_time - start_time))
echo "Running abnormal/tools/dev/common_bash_includes...${end_time}ms...${time_taken}ms...Done"
start_time=$(gdate +%s%3N)
echo "Running venv-activate...${start_time}ms...deactivate" && \
  deactivate() 2>&1
echo "Running venv-activate...${start_time}ms...activate" && \
  source ${VENV}/bin/activate 2>&1
end_time=$(gdate +%s%3N)
time_taken=$((end_time - start_time))
echo "Running venv-activate...${end_time}ms...${time_taken}ms...Done"
# AWS_PROFILE must be set after bash_includes
export AWS_PROFILE=absec-mgmt

LD_LIBRARY_PATH=/usr/local/opt/openssl/lib:${LD_LIBRARY_PATH}
CPATH=/usr/local/opt/openssl/include:${CPATH}
PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig:${PKG_CONFIG_PATH}
export LD_LIBRARY_PATH CPATH PKG_CONFIG_PATH

start_time=$(gdate +%s%3N)
echo "Running colima...${start_time}ms"
eval "$(colima completion zsh)"
end_time=$(gdate +%s%3N)
time_taken=$((end_time - start_time))
echo "Running colima...${end_time}ms...${time_taken}ms...Done"

# Adding a function in bash_profile
function broadcast_to_airflow_onboarding_workers() {
  BROADCAST_COMMAND="\"$1\""
  echo "Broadcasting command: $BROADCAST_COMMAND"

  output_file="/tmp/broadcast_output.txt"
  echo "" >> $output_file
  # tail -f $output_file &
  # for IP_ADDRESS in "space-separated recipient IP addresses"
  for IP_ADDRESS in $(airflow_onboarding_worker_ips)
  do
    echo $IP_ADDRESS >> $output_file
    echo "ssh -t $IP_ADDRESS \"docker exec -it \\\$(docker container ps -f name=airflow-worker | sed -n '2 p' | cut -f1 -d' ' ) /bin/bash -c -i $BROADCAST_COMMAND\""
    # infocmp -a xterm-kitty | ssh $IP_ADDRESS tic -x -o \~/.terminfo /dev/stdin
    ssh -t $IP_ADDRESS "docker exec -it \$(docker container ps -f name=airflow-worker | sed -n '2 p' | cut -f1 -d' ' ) /bin/bash -c -i $BROADCAST_COMMAND" >> $output_file
    echo "##################################################" >> $output_file
  done
  fg
}

