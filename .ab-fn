#!/usr/bin/env zsh

function run_prod_proxy() {
  declare -A ENV_MAP=( ["pmmt"]="pm" ["prod"]="p" ["test"]="t" ["tmmt"]="tm" )
  declare -A ENV_PROFILE_MAP=( ["pmmt"]="absec-mgmt-dbadmin" ["prod"]="absec-prod-dbadmin" ["test"]="absec-test-dbadmin" ["tmmt"]="absec-mgmt-dbadmin" )
  declare -A REGION_MAP=( ["usea1"]="us-east-1" ["usea2"]="us-east-2" ["euwe1"]="eu-west-1" )
  ################################################################################
  export CONTEXT=$(kubectl config view -o jsonpath='{range .contexts[*]}{.name}{"\n"}{end}' | fzf --header="Choose the correct kubecontext for the environment you are trying to access.")
  MY_ENV=$(echo $CONTEXT | cut -f2 -d-)
  MY_PRODUCT=$(ls $SOURCE/config/app | xargs basename | grep "^[a-z]" | sort | fzf --header="Pick the product")
  MY_APP=$(ls $SOURCE/config/app/$MY_PRODUCT | xargs basename | grep "^[a-z]" | sort | fzf --header="Pick the app")
  # DB_COMPONENT=$(cat $SOURCE/config/app/$MY_PRODUCT/$MY_APP/manifest.yaml | yq '(.components.[] | select(.component == "rdb") | key)' | sort | fzf --header="Pick the db")
  ################################################################################
  export AWS_PROFILE=$ENV_PROFILE_MAP[$MY_ENV]
  ENV_URL=$ENV_MAP[$MY_ENV]
  NAMESPACE=${MY_PRODUCT}--${MY_APP}
  REGION_SHORT=$(echo $CONTEXT | cut -f3 -d-)
  export REGION=$REGION_MAP[$REGION_SHORT]
  export RUN_MODE=inline
  ################################################################################
  ARN_ID=AbsecDBAdmin 
  if [[ "$AWS_PROFILE" == "absec-mgmt-dbadmin" ]]
  then 
    echo "absec-mgmt-dbadmin"
    export AWS_PROFILE=absec-mgmt-ops
    ARN_ID=AbsecMgmtEngineerOps
  fi
  CALLER_IDENTITY=$(aws sts get-caller-identity)
  LOGGED_IN_ARN=$( echo $CALLER_IDENTITY | grep $ARN_ID)
  if [[ "$LOGGED_IN_ARN" == "" ]]; then 
    aws sso login
  fi
  CALLER_IDENTITY=$(aws sts get-caller-identity)
  CALLER_IDENTITY_ARN=$( echo $CALLER_IDENTITY | jq '.Arn')
  echo $CALLER_IDENTITY_ARN
  ################################################################################
  AWS_RDS_DESCRIBE=$(aws rds --region $REGION describe-db-instances | jq -r ".DBInstances | .[] | select(.TagList.[].Value==\"$MY_PRODUCT\" and .TagList.[].Value==\"$MY_APP\")")
  # echo "AWS_RDS_DESCRIBE=$AWS_RDS_DESCRIBE"
  export TARGET=$(echo $AWS_RDS_DESCRIBE | jq -r "\"\(.Endpoint.Address):\(.Endpoint.Port)\"" | uniq | sort | fzf --header="Pick the RDS Host you want to connect to")
  echo "TARGET=$TARGET"
  export PGHOST=$(echo $TARGET | gawk -F: '{ print $1 }')
  export PGPORT=$(echo $TARGET | gawk -F: '{ print $2 }')
  export LOCAL_PORT=$PGPORT
  echo "127.0.0.1 ro.db.${MY_APP}.${MY_PRODUCT}.${REGION_SHORT}.${ENV_URL}.abnml.io" | sudo tee -a /etc/hosts
  echo "127.0.0.1 rw.db.${MY_APP}.${MY_PRODUCT}.${REGION_SHORT}.${ENV_URL}.abnml.io" | sudo tee -a /etc/hosts
  prod-proxy start
  sudo gsed '/r.\.db.*\.abnml\.io/d' -i /etc/hosts
}

function abpsql() {
  declare -A ENV_MAP=( ["pmmt"]="pm" ["prod"]="p" ["test"]="t" ["tmmt"]="tm" )
  declare -A ENV_PROFILE_MAP=( ["pmmt"]="absec-mgmt-dbadmin" ["prod"]="absec-prod-dbadmin" ["test"]="absec-test-dbadmin" ["tmmt"]="absec-mgmt-dbadmin" )
  declare -A REGION_MAP=( ["usea1"]="us-east-1" ["usea2"]="us-east-2" ["euwe1"]="eu-west-1" )
  ################################################################################
  export CONTEXT=$(kubectl config view -o jsonpath='{range .contexts[*]}{.name}{"\n"}{end}' | fzf --header="Choose the correct kubecontext for the environment you are trying to access.")
  MY_ENV=$(echo $CONTEXT | cut -f2 -d-)
  MY_PRODUCT=$(ls $SOURCE/config/app | xargs basename | grep "^[a-z]" | sort | fzf --header="Pick the product")
  MY_APP=$(ls $SOURCE/config/app/$MY_PRODUCT | xargs basename | grep "^[a-z]" | sort | fzf --header="Pick the app")
  # DB_COMPONENTS=$(cat $SOURCE/config/app/$MY_PRODUCT/$MY_APP/manifest.yaml | yq '(.components.[] | select(.component == "rdb") | key)' | sort | fzf --header="Pick the db")
  ################################################################################
  export AWS_PROFILE=$ENV_PROFILE_MAP[$MY_ENV]
  ENV_URL=$ENV_MAP[$MY_ENV]
  NAMESPACE=${MY_PRODUCT}--${MY_APP}
  export PGSSLMODE=verify-ca
  export PGSSLROOTCERT=$HOME/.postgresql/root.crt
  # export PGUSER=$(echo "operator\nplatformadmin\nadmin\nrw\nro" | fzf  --header="Pick a user.")
  export PGUSER=operator
  REGION_SHORT=$(echo $CONTEXT | cut -f3 -d-)
  export REGION=$REGION_MAP[$REGION_SHORT]
  ################################################################################
  # Assumes that you are logged in as db admin on sso if there is something in ~/.aws/cli/cache/
  ARN_ID=AbsecDBAdmin 
  if [[ "$AWS_PROFILE" == "absec-mgmt-dbadmin" ]]
  then 
    echo "absec-mgmt-dbadmin"
    export AWS_PROFILE=absec-mgmt-ops
    ARN_ID=AbsecMgmtEngineerOps
  fi
  CALLER_IDENTITY=$(aws sts get-caller-identity)
  LOGGED_IN_ARN=$( echo $CALLER_IDENTITY | grep $ARN_ID)
  if [[ "$LOGGED_IN_ARN" == "" ]]; then 
    aws sso login
  fi
  CALLER_IDENTITY=$(aws sts get-caller-identity)
  ABNORMAL_USER=$(echo $CALLER_IDENTITY | jq -r '.UserId' | cut -f2 -d ':' | cut -f1 -d '@')
  export ABSEC_IDENTITY=aid://user/$ABNORMAL_USER
  AWS_RDS_DESCRIBE=$(aws rds --region $REGION describe-db-instances | jq -r ".DBInstances | .[] | select(.TagList.[].Value==\"$MY_PRODUCT\" and .TagList.[].Value==\"$MY_APP\")")
  # echo "AWS_RDS_DESCRIBE=$AWS_RDS_DESCRIBE"
  TARGET=$(echo $AWS_RDS_DESCRIBE | jq -r "\"\(.Endpoint.Address):\(.Endpoint.Port)\"" | uniq | sort | fzf --header="Pick the RDS Host you want to connect to")
  echo "TARGET=$TARGET"
  export PGHOST=$(echo $TARGET | gawk -F: '{ print $1 }')
  export PGPORT=$(echo $TARGET | gawk -F: '{ print $2 }')
  export PGDATABASE=$(echo $AWS_RDS_DESCRIBE | jq -r '.DBName' | uniq | sort | fzf --header "Pick the database name. (This information was picked out from the application name. Please contact #pi-data-platform if this doesnt correspond.")
  ABDJANGO_ENV=$( if [[ "$MY_ENV" == "tmmt" ]]; then echo "test"; elif [[ "$MY_ENV" == "pmmt" ]]; then echo "prod"; else echo $MY_ENV; fi)
  ABDJANGO_USER=$( if [[ "$PGUSER" == "rw" ]]; then echo "writer"; elif [[ "$PGUSER" == "operator" ]]; then echo "operator"; else echo "reader"; fi)
  unset ABSEC_CLOUD ABSEC_ENV ABSEC_PART ABSEC_REGION
  if [[ "$MY_ENV" == "tmmt" || "$MY_ENV" == "pmmt" ]]; then 
    echo abdjango showconnectioninfo --env $ABDJANGO_ENV --cloud aws --region $REGION --partition management --product $MY_PRODUCT --application $MY_APP --component db --user $ABDJANGO_USER
    abdjango showconnectioninfo --env $ABDJANGO_ENV --cloud aws --region $REGION --partition management --product $MY_PRODUCT --application $MY_APP --component db --user $ABDJANGO_USER
  else
    echo abdjango showconnectioninfo --env $ABDJANGO_ENV --cloud aws --region $REGION --product $MY_PRODUCT --application $MY_APP --component db --user $ABDJANGO_USER
    abdjango showconnectioninfo --env $ABDJANGO_ENV --cloud aws --region $REGION --product $MY_PRODUCT --application $MY_APP --component db --user $ABDJANGO_USER
  fi
  export PGPASSWORD="$(aws rds generate-db-auth-token --hostname $PGHOST --port $PGPORT --region $REGION --username $PGUSER)"
  export DATABASE_URL="postgres://$PGUSER:$(python -c 'import urllib.parse; import os; print(urllib.parse.quote_plus(os.environ["PGPASSWORD"]));')@$PGHOST:$PGPORT/$PGDATABASE"
  read
  psql
}

function abkafka() {
  export MSK_ARN=$(aws kafka list-clusters | jq --raw-output ".ClusterInfoList | .[] | .ClusterArn" | fzf)
  export KAFKA_BOOTSTRAP_BROKER=$(aws kafka get-bootstrap-brokers --cluster-arn $MSK_ARN --query BootstrapBrokerStringTls --output text | cut -d, -f1)
  export KAFKA_CLUSTER=(--command-config "${HOME}/.config/kafka/client.properties" --bootstrap-server "${KAFKA_BOOTSTRAP_BROKER}")
}

function ab_apps() {
  set -o shwordsplit
  result=""
  for product in "email"; do
    MY_APPS=$(ls $SOURCE/config/app/$product | xargs basename | grep "^[a-z]" | grep "graymail" | sort)
    for app in ${MY_APPS[@]}; do
      MY_COMPONENTS=$(cat $SOURCE/config/app/$product/$app/manifest.yaml | yq '(.services.[] | key), (.components.[] | key)')
      for component in ${MY_COMPONENTS[@]}; do
        echo "$product.$app.$component"
        result="$result $product.$app.$component"
      done
    done
  done
}

function ab_cost_components() {
  set -o shwordsplit
  result=""
  for product in "email"; do
    MY_APPS=$(ls $SOURCE/config/app/$product | xargs basename | grep "^[a-z]" | grep "graymail" | sort)
    for app in ${MY_APPS[@]}; do
      MY_COMPONENTS=$(cat $SOURCE/config/app/$product/$app/manifest.yaml | yq '(.services.[] | key), (.components.[] | key)')
      for component in ${MY_COMPONENTS[@]}; do
        result="$result%22%2C%22$product.$app.$component"
      done
    done
  done
  result="$result%22%2C%22graymail"
  result="$result%22%2C%22graymail-dev"
  result="$result%22%2C%22graymail-prod"
  result="$result%22%2C%22unwanted-mail"
  result="$result%22%2C%22unwanted-mail-prod"
  result="$result%22%2C%22unwanted-mail-staging"
  result="%5B%22$result%22%5D"
  echo $result
}

