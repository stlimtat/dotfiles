# What protocol to use when performing git operations. Supported values: ssh, https
git_protocol: https
# What editor gh should run when creating issues, pull requests, etc. If blank, will refer to environment.
editor:
# When to interactively prompt. This is a global config that cannot be overridden by hostname. Supported values: enabled, disabled
prompt: enabled
# A pager program to send command output to, e.g. "less". Set the value to "cat" to disable the pager.
pager: delta -s
# Aliases allow you to create nicknames for gh commands
aliases:
  adhoc-scorer-test: '!WORKFLOW=deploy_adhoc_scorer_aws_mgmt.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD) --field identifier=zmo;sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  co: pr checkout
  bento_tmmt: '![[ "$BENTO_TARGET" == "" ]] && echo "Need to specify BENTO_TARGET" && exit 1;WORKFLOW=publish_bento_image_ecr.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD) -F environments=test -F region_stratos_lite=true -F region_us_legacy=true -F bento_target=$BENTO_TARGET;sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gmpr: '!BRANCH=$(git rev-parse --abbrev-ref HEAD | cut -f 3 -d /);gh pr create --title "[Graymail] $BRANCH" --label msp-graymail --template pull_request_template.md'
  gm-airflow-test: '!WORKFLOW=deploy_graymail_airflow_test.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD);sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-airflow-prod: '!WORKFLOW=deploy_graymail_airflow_prod.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD) -F no_prompt=true;sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-prod: '!WORKFLOW=deploy_graymail_service_prod.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD) -F no_prompt=true;sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-test: '!WORKFLOW=deploy_graymail_service_test.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD);sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-ecs-prod: '!WORKFLOW=deploy_graymail_service_ecs_prod.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD) -F no_prompt=true;sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-ecs-test: '!WORKFLOW=deploy_graymail_service_ecs_staging.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD);sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-gnp-prod: '!WORKFLOW=deploy_graymail_gnp_prod.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD) -F no_prompt=true;sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-gnp-test: '!WORKFLOW=deploy_graymail_gnp_test.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD);sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-gps-prod: '!WORKFLOW=deploy_graymail_gps_prod.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD) -F no_prompt=true;sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-gps-test: '!WORKFLOW=deploy_graymail_gps_test.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD);sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-reports-api-prod: '!WORKFLOW=deploy_graymail_reports_api_prod.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD) -F no_prompt=true;sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-reports-api-test: '!WORKFLOW=deploy_graymail_reports_api_test.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD);sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-reports-coll-prod: '!WORKFLOW=deploy_graymail_reports_collector_prod.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD) -F no_prompt=true;sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-reports-coll-test: '!WORKFLOW=deploy_graymail_reports_collector_test.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD);sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-reports-jobs-prod: '!WORKFLOW=deploy_graymail_reports_jobs_prod.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD) -F no_prompt=true;sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-reports-jobs-test: '!WORKFLOW=deploy_graymail_reports_jobs_test.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD);sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-reprocess-prod: '!WORKFLOW=deploy_graymail_reprocess_prod.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD) -F no_prompt=true;sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-reprocess-test: '!WORKFLOW=deploy_graymail_reprocess_test.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD);sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  gm-unleash: '!WORKFLOW=deploy_graymail_reports_unleash.yml; gh workflow run $WORKFLOW --ref=$(git symbolic-ref --short HEAD) -F no_prompt=true;sleep 10;gh_out=$(gh run list --user assweet --workflow=$WORKFLOW -L 2 --json "headBranch,databaseId,startedAt,status"); echo $gh_out; gh run watch $(echo $gh_out | jq ".[0].databaseId")'
  prls: pr list --author '@me'
# The path to a unix socket through which send HTTP connections. If blank, HTTP traffic will be handled by net/http.DefaultTransport.
http_unix_socket:
# What web browser gh should use when opening URLs. If blank, will refer to environment.
browser:
version: "1"
