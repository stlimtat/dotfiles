# Git credentials
# Not in the repository, to prevent people from accidentally committing under my name
GIT_AUTHOR_NAME="Lim Swee Tat"
GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
git config --global user.name "$GIT_AUTHOR_NAME"
GIT_AUTHOR_EMAIL="slim@abnormalsecurity.com"
GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"
git config --global user.email "$GIT_AUTHOR_EMAIL"
export HOMEBREW_GITHUB_API_TOKEN=""
git config --global user.signingkey xxx



# Android NDK Home
export ANDROID_NDK_HOME="/usr/local/share/android-ndk"

# Using nvm
export NVM_DIR="$HOME/.nvm"
. "/usr/local/opt/nvm/nvm.sh"

# For gvm
source $HOME/.gvm/scripts/gvm

# Using jenv
eval "$(/usr/local/bin/jenv init - ${SHELL})"
export JAVA_HOME=$(/usr/local/bin/jenv javahome)

# Using pyenv
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# For rbenv
# eval "$(/usr/local/bin/rbenv init - )"

# iterm2 shell integration
test -e "${HOME}/.iterm2_shell_integration.$(basename $SHELL)" && source "${HOME}/.iterm2_shell_integration.$(basename $SHELL)"

# Alias
# For some odd ohmyzsh theme which gives jenv_prompt_info errors
alias jenv_prompt_info="jenv version-name"

# For lvim
# https://www.lunarvim.org/
alias vim='$HOME/.local/bin/lvim'

# For some odd ohmyzsh theme which gives zsh_path errors
#alias zsh_path="dirname $(which zsh)"
alias zsh_path="pwd"

# For adding Renv to the path
# export PATH=${PATH}:/Library/TeX/texbin:${HOME}/.Renv/bin
# eval "$(${HOME}/.Renv/bin/Renv init -)"

# Map caps lock to delete-backspace
# https://apple.stackexchange.com/questions/7231/how-can-i-rebind-caps-lock-to-delete-backspace
hidutil property --set '{"UserKeyMapping":[{"HIDKeyboardModifierMappingSrc":0x700000039,"HIDKeyboardModifierMappingDst":0x70000002A}]}' > /dev/null 2>&1
tabs -2

unset -f diff > /dev/null 2>&1

# AWS Disable pagination
#export AWS_PAGER=""
#export DATABRICKS_AWS_TOKEN=dapia607e9ea91f04633998ae6bc9e0dd9fd

# Some odd things
# unalias conda > /dev/null 2>&1
# unfunction conda > /dev/null 2>&1
# export __conda_home=$(pyenv prefix miniconda3-latest)
# # >>> conda initialize >>>
# # !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('${__conda_home}/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "${__conda_home}/etc/profile.d/conda.sh" ]; then
#         . "${__conda_home}/etc/profile.d/conda.sh"
#     else
#         export PATH="${__conda_home}/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# # <<< conda initialize <<<
# unset conda

# # Abnormal source
# export PYSPARK_PYTHON=$(pyenv prefix miniconda3-latest)/envs/abnormal/bin/python
# export SPARK_HOME=${HOME}/installs/spark-2.3.0-bin-hadoop2.7
# export PATH=$SPARK_HOME/bin:$PATH

export PYENV_VENV=3.8.8/envs/abnormal8
export SOURCE=${HOME}/source
export VENV=$(pyenv prefix $PYENV_VENV)
pyenv activate $PYENV_VENV
. ${SOURCE}/tools/dev/common_bash_includes

export CHRONOSPHERE_API_TOKEN=
export CHRONOSPHERE_ORG_NAME=abnormal

export KUBECONFIG="$SOURCE/ops/kubernetes/azure/prod/configurations/kubelogin_config_deploy.yaml"
export MANAGED_IDENTITY_CLIENT_ID=""
export STORAGE_ACCOUNT_URL="https://abnormaldataneu.blob.core.windows.net"


alias airflow_worker_ips="aws ec2 describe-instances --filters Name=tag:Name,Values=airflow-worker-prod | jq -r '.Reservations[].Instances[].PrivateIpAddress' | sort "
alias airflow_onboarding_worker_ips="aws ec2 describe-instances --filters Name=tag:Name,Values=airflow-worker-onboarding | jq -r '.Reservations[].Instances[].PrivateIpAddress' | sort"

# in bash_profile
broadcast_to_airflow_onboarding_workers() {
  BROADCAST_COMMAND="\"$1\""
  echo "Broadcasting command: $BROADCAST_COMMAND"

  output_file="/tmp/broadcast_output.txt"
  echo "" > $output_file
  tail -f $output_file &
  # for IP_ADDRESS in "space-separated recipient IP addresses"
  for IP_ADDRESS in $(airflow_onboarding_worker_ips)
  do
    echo $IP_ADDRESS >> $output_file
    echo "ssh -t $IP_ADDRESS \"docker exec -it \\\$(docker container ps -f name=airflow-worker | sed -n '2 p' | cut -f1 -d' ' ) /bin/bash -c -i $BROADCAST_COMMAND\""
    ssh -t $IP_ADDRESS "docker exec -it \$(docker container ps -f name=airflow-worker | sed -n '2 p' | cut -f1 -d' ' ) /bin/bash -c -i $BROADCAST_COMMAND" >> $output_file
    echo "##################################################" >> $output_file
  done
  fg
}

